#include <iostream>
#include <vector>
#include <fstream>
#include "BigInt.cpp"

void interpretInstruction(int data, int& opcode, int& mode1, int& mode2, int& mode3);
bool usesTwoParams(int opcode);
bigint getData(const int dataType, std::vector<bigint> &data, int sp, int &opcode, int& relativeBase);
bigint getAndExpand(std::vector<bigint>& data, int val);

int main()
{
	//std::vector<int> data{ 3,225,1,225,6,6,1100,1,238,225,104,0,2,218,57,224,101,-3828,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,26,25,224,1001,224,-650,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1102,44,37,225,1102,51,26,225,1102,70,94,225,1002,188,7,224,1001,224,-70,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,1101,86,70,225,1101,80,25,224,101,-105,224,224,4,224,102,8,223,223,101,1,224,224,1,224,223,223,101,6,91,224,1001,224,-92,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1102,61,60,225,1001,139,81,224,101,-142,224,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,102,40,65,224,1001,224,-2800,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1102,72,10,225,1101,71,21,225,1,62,192,224,1001,224,-47,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1101,76,87,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1107,677,226,224,102,2,223,223,1006,224,344,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,359,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,374,101,1,223,223,108,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,107,677,226,224,102,2,223,223,1006,224,404,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1107,677,677,224,1002,223,2,223,1006,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,479,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,494,101,1,223,223,1008,226,677,224,1002,223,2,223,1005,224,509,1001,223,1,223,1007,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,539,101,1,223,223,1108,226,226,224,1002,223,2,223,1006,224,554,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,569,1001,223,1,223,7,226,226,224,102,2,223,223,1005,224,584,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,614,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,629,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,644,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,659,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226 };
	//std::vector<bigint> data{ 1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,1,24,1017,1101,0,36,1006,1101,0,30,1011,1101,26,0,1018,1101,32,0,1015,1101,34,0,1004,1101,0,37,1002,1101,25,0,1012,1102,38,1,1010,1101,29,0,1019,1101,308,0,1029,1102,1,696,1027,1102,1,429,1022,1102,1,21,1005,1102,1,33,1013,1101,39,0,1008,1102,20,1,1009,1101,0,652,1025,1102,313,1,1028,1101,0,31,1003,1102,661,1,1024,1101,35,0,1016,1101,0,23,1000,1102,28,1,1014,1102,0,1,1020,1102,27,1,1007,1101,0,1,1021,1102,22,1,1001,1101,703,0,1026,1101,0,422,1023,109,-5,2101,0,9,63,1008,63,31,63,1005,63,205,1001,64,1,64,1105,1,207,4,187,1002,64,2,64,109,6,2102,1,3,63,1008,63,37,63,1005,63,227,1105,1,233,4,213,1001,64,1,64,1002,64,2,64,109,11,21108,40,40,3,1005,1015,255,4,239,1001,64,1,64,1106,0,255,1002,64,2,64,109,-3,21107,41,40,2,1005,1011,275,1001,64,1,64,1105,1,277,4,261,1002,64,2,64,109,4,2107,28,-6,63,1005,63,297,1001,64,1,64,1106,0,299,4,283,1002,64,2,64,109,15,2106,0,0,4,305,1106,0,317,1001,64,1,64,1002,64,2,64,109,-23,2108,22,4,63,1005,63,337,1001,64,1,64,1105,1,339,4,323,1002,64,2,64,109,6,21101,42,0,0,1008,1011,40,63,1005,63,363,1001,64,1,64,1105,1,365,4,345,1002,64,2,64,109,-17,1207,7,21,63,1005,63,381,1105,1,387,4,371,1001,64,1,64,1002,64,2,64,109,14,1201,-1,0,63,1008,63,25,63,1005,63,407,1105,1,413,4,393,1001,64,1,64,1002,64,2,64,109,15,2105,1,0,1001,64,1,64,1105,1,431,4,419,1002,64,2,64,109,-23,2101,0,6,63,1008,63,36,63,1005,63,453,4,437,1106,0,457,1001,64,1,64,1002,64,2,64,109,10,2108,21,-5,63,1005,63,475,4,463,1106,0,479,1001,64,1,64,1002,64,2,64,109,-3,1201,2,0,63,1008,63,20,63,1005,63,505,4,485,1001,64,1,64,1105,1,505,1002,64,2,64,109,4,2107,35,-5,63,1005,63,527,4,511,1001,64,1,64,1105,1,527,1002,64,2,64,109,15,1206,-5,543,1001,64,1,64,1105,1,545,4,533,1002,64,2,64,109,-8,1205,3,563,4,551,1001,64,1,64,1106,0,563,1002,64,2,64,109,-5,1206,7,581,4,569,1001,64,1,64,1105,1,581,1002,64,2,64,109,-8,1207,-3,38,63,1005,63,599,4,587,1105,1,603,1001,64,1,64,1002,64,2,64,109,19,1205,-4,619,1001,64,1,64,1105,1,621,4,609,1002,64,2,64,109,-13,1208,-4,27,63,1005,63,639,4,627,1105,1,643,1001,64,1,64,1002,64,2,64,109,5,2105,1,8,4,649,1001,64,1,64,1106,0,661,1002,64,2,64,109,-16,1202,4,1,63,1008,63,34,63,1005,63,683,4,667,1106,0,687,1001,64,1,64,1002,64,2,64,109,26,2106,0,1,1001,64,1,64,1105,1,705,4,693,1002,64,2,64,109,-9,21102,43,1,-7,1008,1010,46,63,1005,63,725,1105,1,731,4,711,1001,64,1,64,1002,64,2,64,109,-26,1202,9,1,63,1008,63,26,63,1005,63,755,1001,64,1,64,1105,1,757,4,737,1002,64,2,64,109,34,21108,44,43,-8,1005,1017,773,1106,0,779,4,763,1001,64,1,64,1002,64,2,64,109,-15,21102,45,1,1,1008,1011,45,63,1005,63,801,4,785,1106,0,805,1001,64,1,64,1002,64,2,64,109,-14,1208,10,35,63,1005,63,821,1106,0,827,4,811,1001,64,1,64,1002,64,2,64,109,17,2102,1,-4,63,1008,63,20,63,1005,63,853,4,833,1001,64,1,64,1106,0,853,1002,64,2,64,109,6,21107,46,47,-4,1005,1015,871,4,859,1105,1,875,1001,64,1,64,1002,64,2,64,109,-10,21101,47,0,4,1008,1013,47,63,1005,63,901,4,881,1001,64,1,64,1105,1,901,4,64,99,21102,27,1,1,21102,1,915,0,1106,0,922,21201,1,37790,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,1,942,0,1106,0,922,22102,1,1,-1,21201,-2,-3,1,21102,957,1,0,1105,1,922,22201,1,-1,-2,1105,1,968,21201,-2,0,-2,109,-3,2105,1,0 };
	std::vector<bigint> data{ 109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99 };
	auto sp = 0;
	auto exit = false;
	auto sp_inc = 4;
	auto jump = false;
	auto relativeBase = 0;

	while (!exit) {
		sp_inc = 4;
		jump = false;
		int opcode, t1;// , mode1, mode2, mode3, t1;
		//interpretInstruction(data[sp], opcode, mode1, mode2, mode3);
		//int data1 = opcode != 99 ? (mode1 ? data[sp + 1] : data[data[sp + 1]]) : 0;
		//int data2 = (usesTwoParams(opcode)) ? (mode2 ? data[sp + 2] : data[data[sp + 2]]) : 0;
		bigint data1 = getData(1, data, sp, opcode, relativeBase);
		bigint data2 = getData(2, data, sp, opcode, relativeBase);
		// data3 unnecessary, only writes to atm
		switch (opcode) {
		case 1:
			t1 = std::stoi(data[sp + 3].to_string());
			getAndExpand(data, t1);
			data[std::stoi(data[sp + 3].to_string())] = data1 + data2;
			break;
		case 2:
			t1 = std::stoi(data[sp + 3].to_string());
			getAndExpand(data, t1);
			data[std::stoi(data[sp + 3].to_string())] = data1 * data2;
			break;
		case 3:
			sp_inc = 2;
			int in;
			std::cin >> in;
			data[std::stoi(data[sp + 1].to_string())] = in;
			break;
		case 4:
			sp_inc = 2;
			std::cout << data1 << std::endl;
			break;
		case 5:
			if (data1 > 0) {
				jump = true;
				sp = std::stoi(data2.to_string());
			}
			else sp_inc = 3;
			break;
		case 6:
			if (data1 == 0) {
				jump = true;
				sp = std::stoi(data2.to_string());
			}
			else sp_inc = 3;
			break;
		case 7:
			getAndExpand(data, std::stoi(data[sp + 3].to_string()));
			data[std::stoi(data[sp + 3].to_string())] = data1 < data2 ? 1 : 0;
			break;
		case 8:
			getAndExpand(data, std::stoi(data[sp + 3].to_string()));
			data[std::stoi(data[sp + 3].to_string())] = data1 == data2 ? 1 : 0;
			break;
		case 9:
			sp_inc = 2;
			relativeBase += std::stoi(data1.to_string());
			break;
		case 99:
			exit = true;
			break;
		default:
			std::cout << "error!";
			return 0;
		}
		if (!jump)
			sp += sp_inc;
	}
}

bigint getData(const int dataType, std::vector<bigint> &data, int sp, int &opcode, int &relativeBase) {
	int mode1, mode2, mode3, t1;// , data1, data2;
	bigint data1, data2;
	interpretInstruction(std::stoi(data[sp].to_string()), opcode, mode1, mode2, mode3);
	
	switch (dataType) {
	case 1:
		if (opcode == 99)
			data1 = 0;
		else {
			if (mode1 == 2)
				data1 = getAndExpand(data, std::stoi(data[relativeBase].to_string()));//data[data[relativeBase]];
			else if (mode1 == 1)
				data1 = data[sp + 1];
			else
				data1 = getAndExpand(data, std::stoi(data[sp+1].to_string()));// data[data[sp + 1]];
		}
		return data1;
	case 2:
		if (!usesTwoParams(opcode))
			data2 = 0;
		else {
			if (mode2 == 2)
				data2 = getAndExpand(data, std::stoi(data[relativeBase].to_string()));// data[data[relativeBase]];
			else if (mode2 == 1)
				data2 = data[sp + 2];
			else
				data2 = getAndExpand(data, std::stoi(data[sp + 2].to_string()));// data[data[sp + 2]];
		}
		return data2;
	}
}

bigint getAndExpand(std::vector<bigint>& data, int val) {
	while (data.size() < val + 1)
		data.push_back(0);
	return data[val];
}

void interpretInstruction(int data, int& opcode, int& mode1, int& mode2, int& mode3)
{
	opcode = data > 10 ? data % 100 : data % 10;
	data > 10 ? data /= 100 : data /= 10;
	mode1 = data > 0 ? data % 10 : 0;
	if (data > 0) data /= 10;
	mode2 = data > 0 ? data % 10 : 0;
	if (data > 0) data /= 10;
	mode3 = data > 0 ? data % 10 : 0;
	if (data > 0) data /= 10;
}

bool usesTwoParams(int opcode)
{
	switch (opcode) {
	case 1:
	case 2:
	case 5:
	case 6:
	case 7:
	case 8:
		return true;
	default:
		return false;
	}
}